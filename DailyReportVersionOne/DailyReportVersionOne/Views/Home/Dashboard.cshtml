@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> _signInManager
@model DashboardViewModel
@inject UserManager<ApplicationUser> _userManager
@{
    ViewData["Title"] = "Dashboard";
    var users = _userManager.Users.ToList();
}
<h1>@ViewData["Title"]   (@DateTime.Today.ToString("D"))</h1>
@foreach(var user in users)
{
    var MyProject = Model.Projects.FirstOrDefault(p => p.UserName == user.UserName);
    var MyBid = Model.Bids.FirstOrDefault(p => p.UserName == user.UserName);
    var MyStudy = Model.Studies.FirstOrDefault(p => p.UserName == user.UserName);
    if (MyBid == null) continue;
    <div class="card mb-3">
        <div class="card-header">
            @user.UserName
        </div>
        <div class="card-body">
             <div class="card-title">
                 Project:
                @if(MyProject == null)
                {
                    <p>Project does not exist.</p>
                }
                else
                {
                    <div class="row justify-content-center">
                        <div class="col-2">Name: @MyProject.ProjectName</div>
                        <div class="col-2">Budget: @MyProject.ProjectPrice US$</div>
                        <div class="col-2">Client: @MyProject.ClientCountry</div>
                        <div class="col-2">Progress: @MyProject.ProjectState %</div>
                        <div class="col-2">Start: @MyProject.ProjectStartDate.Date.ToString("d")</div>
                   </div>
                }
                
             </div>
             <div class="card-title">
                 Bid:
                <div class="row justify-content-center">
                    <div class="col-2"> Upwork: @MyBid.Upwork</div>
                    <div class="col-2"> Freelancer: @MyBid.Freelancer</div>
                    <div class="col-2"> Workana: @MyBid.Workana</div>
                    <div class="col-2"> CrowdWorks: @MyBid.Crowdwork</div>
                    <div class="col-2"> OtherSites: @MyBid.OtherSite</div>

                </div>
             </div>
            <div class="card-title">
                Study:
                @MyStudy.Description ;
            </div>

        </div>
        <div class="card-footer">
            Success
        </div>
    </div>
}
<p id="stateLabel" hidden>Ready to connect...</p>
<div hidden>
    <label for="userName">Username:</label>
    @{
        var UserName = _signInManager.Context.User.Identity.Name;
    }
    <input id="userName" value="@UserName" />

</div>
<div hidden>
    <label for="sendMessage">Message to send:</label>
    <input id="sendMessage" disabled />
    
    <select name="usersList" id="usersList" disabled>
        <option value="">Everybody</option>
    </select>
    <button id="sendButton" type="submit" disabled>Send</button>
    <button id="closeButton" disabled>Disconnect</button>
</div>

<div id="chatLog" hidden></div>
<script>
    var userName = document.getElementById("userName");
    var usersList = document.getElementById("usersList");
    var connectButton = document.getElementById("connectButton");
    var stateLabel = document.getElementById("stateLabel");
    var sendMessage = document.getElementById("sendMessage");
    var sendButton = document.getElementById("sendButton");
    var chatLog = document.getElementById("chatLog");
    var closeButton = document.getElementById("closeButton");
    var socket;
    
    console.log(userName.value);

    var connectionUrl = "ws://localhost:5099/ws?username=";

    function updateState() {
        function disable() {
            sendMessage.disabled = true;
            sendButton.disabled = true;
            closeButton.disabled = true;
            usersList.disabled = true;
        }
        function enable() {
            sendMessage.disabled = false;
            sendButton.disabled = false;
            closeButton.disabled = false;
            usersList.disabled = false;
        }

        //connectButton.disabled = true;
        userName.disabled = true;

        if (!socket) {
            disable();
        } else {
            switch (socket.readyState) {
                case WebSocket.CLOSED:
                    stateLabel.innerHTML = "Closed";
                    disable();
                    //connectionUrl.disabled = false;
                    connectButton.disabled = false;
                    userName.disabled = false;
                    break;
                case WebSocket.CLOSING:
                    stateLabel.innerHTML = "Closing...";
                    disable();
                    break;
                case WebSocket.CONNECTING:
                    stateLabel.innerHTML = "Connecting...";
                    disable();
                    break;
                case WebSocket.OPEN:
                    stateLabel.innerHTML = "Open";
                    enable();
                    break;
                default:
                    stateLabel.innerHTML = "Unknown WebSocket State: " + htmlEscape(socket.readyState);
                    disable();
                    break;
            }
        }
    }

    closeButton.onclick = function () {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("socket not connected");
        }
        socket.close(1000, "Closing from client");
    };

    sendButton.onclick = function () {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("socket not connected");
        }
        var data = sendMessage.value;

        var message = {};
        message.Type = "chat";
        message.Sender = userName.value;
        message.Content = data;
        message.Receiver = usersList.value;
        message.IsPrivate = false;
        console.log(JSON.stringify(message));

        socket.send(JSON.stringify(message));

        sendMessage.value = "";
    };

    window.addEventListener("load", () => {
        function onLoad () {
            console.log("ok");
            stateLabel.innerHTML = "Connecting";
            socket = new WebSocket(connectionUrl + userName.value);
            socket.onopen = function (event) {
                updateState();

                console.log("socket opened", event);
                //var message = {};
                //message.Type = "connection";
                //message.Sender = userName.value;
                //console.log(JSON.stringify(message));
                //socket.send(JSON.stringify(message));
            };
            socket.onclose = function (event) {
                //updateState();
                //chatLog.innerHTML += '<p>Connection closed: ' + htmlEscape(event.reason) + '</p>';
            };
            //socket.onerror = updateState;
            socket.onmessage = function (event) {
                console.log(event.data);
                var receivedMessage = JSON.parse(event.data);
                
                if (receivedMessage.Content) {
                    chatLog.innerHTML += '<p>' + htmlEscape(receivedMessage.Content) + '</p>';
                }
                if (receivedMessage.Type == "CHAT" && receivedMessage.Content == "Here DailyReport Newly Added!!!") {

                    console.log("Here arrived!!!");
                    console.log(receivedMessage.Content);
                    window.location.reload(true);
                }
                if (receivedMessage.Type === "CONNECTION" && receivedMessage.Users) {
                    usersList.options.length = 0;;
                    var cFirst = document.createElement("option");
                    cFirst.value = "";
                    cFirst.text = "Everybody"
                    usersList.add(cFirst);

                    receivedMessage.Users.forEach((user) => {
                        var c = document.createElement("option");
                        c.value = user;
                        c.text = user;

                        usersList.options.add(c);
                    });
                }
            };
        };
        onLoad();
    })

    function htmlEscape(str) {
        return str.toString()
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
</script>